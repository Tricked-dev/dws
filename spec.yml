asyncapi: 2.5.0
info:
  title: DWS
  version: 1.0.0
  description: ""
  license:
    name: MPL 2.0
    url: "https://www.mozilla.org/en-US/MPL/2.0/"
servers:
  ws:
    url: virginity.kokoniara.software/ws
    protocol: wss
    description: |
      WSS
  rest:
    url: virginity.kokoniara.software
    protocol: https
    description: |
      Rest api
channels:
  /broadcast:
    description: |
      Broadcast channel
    subscribe:
      message:
        $ref: "#/components/messages/cosmeticsData"
  /cosmetics:
    description: |
      Cosmetics channel
    subscribe:
      message:
        $ref: "#/components/messages/cosmeticsData"
  /metrics:
    description: |
      Prometheus metrics endpoint
  /ws:
    publish:
      description: Send messages to the API
      operationId: processReceivedMessage
      message:
        oneOf:
          - $ref: "#/components/messages/connect"
          - $ref: "#/components/messages/ping"
          - $ref: "#/components/messages/isOnline"
          - $ref: "#/components/messages/isOnlineBulk"
          - $ref: "#/components/messages/cosmeticsUpdate"

    subscribe:
      description: Messages that you receive from the API
      operationId: sendMessage
      message:
        oneOf:
          - $ref: "#/components/messages/pong"
          - $ref: "#/components/messages/isOnlineBulkResponse"
          - $ref: "#/components/messages/isOnlineResponse"
          - $ref: "#/components/messages/connectResponse"
          - $ref: "#/components/messages/error"
          - $ref: "#/components/messages/broadcast"
          - $ref: "#/components/messages/cosmeticAck"

components:
  messages:
    ping:
      summary: Ping server to determine whether connection is alive
      description: Client can ping server to determine whether connection is alive, server responds with pong. This is an application level ping as opposed to default ping in websockets standard which is server initiated
      payload:
        $ref: "#/components/schemas/ping"
      x-response:
        $ref: "#/components/messages/pong"
    pong:
      summary: Pong is a response to ping message
      description: Server pong response to a ping to determine whether connection is alive. This is an application level pong as opposed to default pong in websockets standard which is sent by client in response to a ping
      payload:
        $ref: "#/components/schemas/pong"
    isOnline:
      summary: You can use this message to check whether a user is online
      description: Checks the api itself to see if the user is connected to the websocket server
      payload:
        $ref: "#/components/schemas/onlineRequest"
      x-response:
        $ref: "#/components/messages/isOnlineResponse"
    isOnlineBulk:
      summary: You can use this message to check whether a list of users are online
      description: Checks the api itself to see if the users are connected to the websocket server
      payload:
        $ref: "#/components/schemas/onlineRequestBulk"
      x-response:
        $ref: "#/components/messages/isOnlineBulkResponse"
    isOnlineBulkResponse:
      summary: Response to isOnlineBulk
      description: Response to isOnlineBulk
      payload:
        $ref: "#/components/schemas/isOnlineBulkResponse"
    connect:
      summary: Connect to the websocket server
      description: Connect to the websocket server
      payload:
        $ref: "#/components/schemas/connect"
      x-response:
        $ref: "#/components/messages/connectResponse"
    isOnlineResponse:
      summary: Response to isOnline message
      description: Response to isOnline message
      payload:
        $ref: "#/components/schemas/isOnlineResponse"
    connectResponse:
      summary: Response to connect message
      description: Response to connect message
      payload:
        $ref: "#/components/schemas/connectedResponse"
    error:
      summary: Error message
      description: Error message
      payload:
        $ref: "#/components/schemas/error"
    broadcast:
      summary: Broadcast message
      description: Broadcast message
      payload:
        $ref: "#/components/schemas/broadcast"
    cosmeticsUpdate:
      summary: Cosmetics update message
      description: Cosmetics update message
      payload:
        $ref: "#/components/schemas/cosmeticsUpdate"
      x-response:
        $ref: "#/components/messages/cosmeticsUpdated"
    cosmeticsUpdated:
      summary: Cosmetics updated message
      description: Cosmetics updated message
      payload:
        $ref: "#/components/schemas/cosmeticsUpdated"
    cosmeticAck:
      summary: Cosmetic ack message
      description: Cosmetic ack message
      payload:
        $ref: "#/components/schemas/cosmeticAck"
    broadcastMessage:
      summary: Broadcast message
      description: Broadcast message
      payload:
        $ref: "#/components/schemas/broadcastMessage"
    cosmeticsData:
      summary: Cosmetics data message
      description: Cosmetics data message
      payload:
        $ref: "#/components/schemas/cosmeticsData"
  schemas:
    ping:
      type: object
      properties:
        t:
          type: string
          const: /ping
        c:
          $ref: "#/components/schemas/nonce"
      required:
        - t
    pong:
      type: object
      properties:
        t:
          type: string
          const: /pong
        c:
          $ref: "#/components/schemas/nonce"
    onlineRequest:
      type: object
      properties:
        t:
          type: string
          const: /is_online
        c:
          type: object
          properties:
            uuid:
              $ref: "#/components/schemas/uuid"
            nonce:
              $ref: "#/components/schemas/nonce"
    onlineRequestBulk:
      type: object
      properties:
        t:
          type: string
          const: /is_online_bulk
        c:
          type: object
          properties:
            uuids:
              type: array
              items:
                $ref: "#/components/schemas/uuid"
            nonce:
              $ref: "#/components/schemas/nonce"
    connect:
      type: object
      properties:
        t:
          type: string
          const: /connect
        c:
          $ref: "#/components/schemas/uuid"
    isOnlineResponse:
      type: object
      properties:
        t:
          type: string
          const: /is_online
        c:
          type: object
          properties:
            uuid:
              $ref: "#/components/schemas/uuid"
            online:
              type: boolean
            nonce:
              $ref: "#/components/schemas/nonce"
    isOnlineBulkResponse:
      type: object
      properties:
        t:
          type: string
          const: /is_online/bulk
        c:
          type: object
          properties:
            uuids:
              type: array
              items:
                type: object
                description: This is actually a key value map
                properties:
                  uuid:
                    $ref: "#/components/schemas/uuid"
                  online:
                    type: boolean
            nonce:
              $ref: "#/components/schemas/nonce"
    connectedResponse:
      type: object
      properties:
        t:
          type: string
          const: /connected
        c:
          type: boolean
    error:
      type: object
      properties:
        t:
          type: string
          const: /error
        c:
          type: object
          properties:
            error:
              type: string
            nonce:
              $ref: "#/components/schemas/nonce"
    broadcast:
      type: object
      properties:
        t:
          type: string
          const: /broadcast
        c:
          type: string
    cosmeticsUpdate:
      type: object
      properties:
        t:
          type: string
          const: /cosmetics/update
        c:
          type: object
          properties:
            cosmetic_id:
              type: integer
            nonce:
              $ref: "#/components/schemas/nonce"
    cosmeticsUpdated:
      type: object
      properties:
        t:
          type: string
          const: /cosmetics/updated
        c:
          type: object
          properties:
            cosmetic_id:
              type: integer
            nonce:
              $ref: "#/components/schemas/nonce"
    broadcastMessage:
      type: object
      properties:
        message:
          type: string
        to:
          type: array
          items:
            $ref: "#/components/schemas/uuid"
    cosmeticAck:
      type: object
      properties:
        t:
          type: string
          const: /cosmetics/ack
    cosmetic:
      descriptions:
        description: this is actually descriptions..
        type: string
      display:
        type: string
      id:
        type: integer
      name:
        type: string
      required_flags:
        type: integer

    cosmeticsData:
      type: object
      properties:
        cosmetics:
          type: array
          items:
            $ref: "#/components/schemas/cosmetic"
    uuid:
      type: string
      description: "A minecraft user uuid"
    nonce:
      type: string
      description: A nonce can be given to identiy a request
